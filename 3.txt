Lexical Analysis - exp 2

//required - keywords, constants, identifiers, operators

#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdbool.h>

bool iskeyword(char *str) {
	 int i;
    char keywords[32][10] = {"auto", "break", "case", "char", "const", "continue", "default", 
                              "do", "double", "else", "enum", "extern", "float", "for", "goto", 
                              "if", "int", "long", "register", "return", "short", "signed", 
                              "sizeof", "static", "struct", "switch", "typedef", "union", 
                              "unsigned", "void", "volatile", "while"};
    for (i = 0; i < 32; ++i) 
	 {
        if (strcmp(keywords[i], str) == 0) 
		  {
            return true;
        }
    }
    return 0;
}

int main()
{
	char input[100];
	char temp[100];
	char op[] = "+-/*%=";
	int i, j;
	printf("C Code: ");
	scanf("%[^\n]s", input);
	strcpy(temp, input);
	
	//operators check
	printf("\nOperators: ");
	for(i = 0; i < strlen(input); i++)
	{
		for(j = 0; j < strlen(op); j++)
		{
			if(input[i] == op[j])
			{
				printf("%c ", input[i]);
			}
		}
	}
	
	char *token = strtok(input, " ");
	printf("\nKeywords: ");
	while(token != NULL)
	{
		if(iskeyword(token))
		{
			printf("%s ", token);
		}
	   token = strtok(NULL, " ");
	}
	
	strcpy(input, temp);
	token = strtok(input, " ");
	printf("\nIdentifiers: ");
	while(token != NULL)
	{
		if(!iskeyword(token) && (isalpha(token[0]) || token[0] == '_'))
		{
			printf("%s ", token);
		}
	   token = strtok(NULL, " ");
	}
	
	strcpy(input, temp);
	token = strtok(input, " ");
	printf("\nConstants: ");
	while(token != NULL)
	{
		if(isdigit(token[0]))
		{
			printf("%s ", token);
		}
	   token = strtok(NULL, " ");
	}
}