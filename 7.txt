Compiler Design Lab - 7
YACC Programs - Recognizing string using Grammar
a)	Program to Recognize the Grammar a^nb^n
Lex:
%{ 
  #include "y.tab.h"
%} 

%% 
[aA] {return A;} 
[bB] {return B;} 
\n {return NL;} 
.  {return yytext[0];} 
%% 
  
int yywrap()  
{  
  return 1;  
}

yacc:
%{ 
   #include<stdio.h> 
   #include<stdlib.h> 
%} 
  
%token A B NL 

%% 
stmt: S NL  { printf("valid string\n"); 
              exit(0); } 
; 
S: A S B | 
; 
%% 
  
int yyerror(char *msg) 
{ 
  printf("invalid string\n"); 
  exit(0); 
} 

int main() 
{ 
  printf("enter the string\n"); 
  yyparse(); 
}

Output: 

 

b)	Program to Recognize the Grammar a^nb
%{
  #include "y.tab.h"
%} 

%%
[aA] {return A;}
[bB] {return B;}
\n {return NL;}
. {return yytext[0];}
%%
  
int yywrap()  
{  
  return 1;  
}

%{
#include "stdio.h"
%}


%token A B NL 
  
%% 
stmt: A S B NL  { printf("valid string\n"); 
              exit(0); } 
; 
S: S A | 
; 
%% 
  
int yyerror(char *msg) 
{ 
  printf("invalid string\n"); 
  exit(0); 
} 
  
//driver code  
int main() 
{ 
  printf("enter the string\n"); 
  yyparse(); 
}

Output: 

 

c)	Program to Recognize the Grammar ab^n
%{
  #include "y.tab.h"
%} 

%%
[aA] {return A;}
[bB] {return B;}
\n {return NL;}
. {return yytext[0];}
%%
  
int yywrap()  
{  
  return 1;  
}

%{
#include "stdio.h"
%}


%token A NL B
  
%% 
stmt: A NL B S  { printf("valid string\n"); 
              exit(0); } 
; 
S: S A | 
; 
%% 
  
int yyerror(char *msg) 
{ 
  printf("invalid string\n"); 
  exit(0); 
} 
  
//driver code  
int main() 
{ 
  printf("enter the string\n"); 
  yyparse(); 
}





Output: 

 

d)	Converting Infix to Postfix Using YACC AND LEX 
Lex:
%{
  #include "y.tab.h"
  extern int yylval;
%} 

%%
[0-9]+ {yylval = atol(yytext); return NUM;}
\n return 0;
. return *yytext;
%%
  
int yywrap()  
{  
  return 1;  
}

yacc:
%{
#include "stdio.h"
int flag = 0;
%}

%token NUM
%left '+' '-'a
%left '*' '/'
%right NEGATIVE

%% 
S: E {printf("\n");}
;
E: E '+' E {printf("+");}
|E '-' E {printf("*");}
|E '*' E {printf("-");}
|E '/' E {printf("/");}
| '('E')'
| '-' E %prec NEGATIVE {printf("-");}
| NUM {printf("%d", yylval);}
;
%%

int main() 
{ 
  yyparse();
} 
  
int yyerror(char *msg) 
{ 
  printf("error; %s\n", msg); 
}

Output: 

 

e)	Implementation of Calculator Using LEX and YACC Tools Program 
Lex:
%{
  #include "stdio.h"
  #include "y.tab.h"
  extern int yylval;
%} 

%%
[0-9]+ {
	yylval = atol(yytext);
	return NUMBER;
	}
[\t] ;
[\n] {return 0;}
. {return yytext[0];}
%%
  
int yywrap()  
{  
  return 1;  
}

yacc:
%{
#include "stdio.h"
int flag = 0;
%}


%token NUMBER
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'

%% 
ArithmeticExpression: E{
			printf("\nResult = %d\n", $$);
			return 0;
			}
			
E: E '+' E {$$ = $1 + $3;}
|E '-' E {$$ = $1 + $3;}
|E '*' E {$$ = $1 + $3;}
|E '/' E {$$ = $1 + $3;}
|E '%' E {$$ = $1 + $3;}
|'('E')' {$$ = $2;}
| NUMBER {$$ = $1;}
;
%% 
  
int yyerror(char *msg) 
{ 
  printf("invalid arithmetic expression\n"); 
  flag = 1;
} 
  
//driver code  
int main() 
{ 
  printf("enter the arithmetic expression: \n"); 
  yyparse(); 
  if(flag == 0)
  {
  	printf("valid arithmetic expresion\n");
  }
}

Output: 

 
